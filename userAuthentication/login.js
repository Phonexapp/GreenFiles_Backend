const router = require("express").Router();
const admin = require("../firebase/firebase");
const bodyParser = require("body-parser");
const bcrypt = require("bcrypt");
var jwt = require("jsonwebtoken");
require("dotenv").config();

const privateKey = process.env.PRIVATE_KEY;

const db = admin.database();
const usersRef = db.ref("users");

// Login route
router.post("/", getToken, async (req, res) => {
  try {
    const { email, password } = req.body;

    const snapshot = await usersRef.once("value");
    const usersData = snapshot.val();

    console.log(usersData);

    // Validate inputs
    if (!email || !password) {
      return res.status(400).json({ error: "Email and password are required" });
    }

    // console.log(email);
    // console.log(hashpassword);

    if (usersData) {
      const usersWithKeys = []; // Array to hold users with keys

      // Loop through the usersData object and extract keys
      Object.keys(usersData).forEach(async (key) => {
        const userWithKey = {
          id: key, // This is the key generated by Firebase
          ...usersData[key], // The user data stored under this key
        };
        const { email, hashpassword } = userWithKey;
        const PasswordBoolean = await bcrypt.compare(password, hashpassword);
        if (email == email && PasswordBoolean) {
          var token = jwt.sign({ email }, privateKey, {
            expiresIn: "24h",
          });
          res.status(200).json({ Message: "Login Sucessfully", token });
        } else {
          res.status(400).json({ Message: "username or password incorrect" });
        }
      });
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Internal Server Error" });
  }
});

// Middleware for getting token
function getToken(req, res, next) {
  const Breaer = req.headers["authorization"];
  if (typeof Breaer !== "undefined") {
    const Data = Breaer.split(" ");
    const Token = Data[1];
    req.token = Token;
  }
  next();
}

// Verify the token
const tokenVerify = (req, res) => {
  jwt.verify(req.token, privateKey, (err, data) => {
    if (err) {
      console.log(err);
    }
    console.log(data);
  });
};

module.exports = router;
